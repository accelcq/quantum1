# frontend/nginx.conf
# This is the Nginx configuration file for serving the React app
events {}
http {
    include       mime.types;
    server {
        listen 80;
        server_name localhost;

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
    }
}
# This configuration serves the React app from the /usr/share/nginx/html directory
# and handles client-side routing by redirecting all requests to index.html.   
# Make sure to build your React app and place the build files in this directory.
# You can build your React app using `npm run build` or `yarn build`.   
# After building, copy the contents of the build directory to /usr/share/nginx/html.
# To run this configuration, you can use a Docker container with Nginx: 
# docker run -d -p 80:80 -v /path/to/your/build:/usr/share/nginx/html nginx
# Replace /path/to/your/build with the actual path to your React app's build directory.
# Ensure that the Nginx server has permission to read the files in the specified directory.
# You can also customize the server_name directive to match your domain or IP address.
# For production use, consider adding SSL configuration for secure connections.
# You can also add additional configurations such as gzip compression, caching, etc.
# For more advanced configurations, refer to the Nginx documentation:
# https://nginx.org/en/docs/
# For debugging, you can check the Nginx error logs at /var/log/nginx/error.log
# and access logs at /var/log/nginx/access.log.
# Make sure to test your configuration with `nginx -t` before reloading or restarting Nginx.
# To reload the Nginx configuration after making changes, use:
# sudo nginx -s reload
# For more information on Nginx configuration, refer to the official documentation:
# https://nginx.org/en/docs/beginners_guide.html
# This configuration is suitable for serving a React app built with Create React App or similar tools.
# Ensure that your React app is built and the build files are placed in the specified directory.
# You can also use this configuration as a starting point for deploying your React app in production.
# For local development, you can use a tool like `serve` to serve your React app:
# npx serve -s build
# This will serve your React app on a local server, allowing you to test it before deploying.
# For more information on deploying React apps, refer to the Create React App documentation:
# https://create-react-app.dev/docs/deployment/
# This configuration is designed to be simple and effective for serving static files
# and handling client-side routing in a React application.
# Make sure to adjust the paths and settings according to your specific environment and requirements.
# You can also add additional security headers, rate limiting, and other optimizations
# as needed for your production environment.