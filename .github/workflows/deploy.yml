name: Deploy Quantum1 Frontend and Backend to IBM Cloud
# This GitHub Actions workflow deploys the Quantum1 frontend and backend applications to IBM Cloud Kubernetes Service.
# It builds Docker images for both applications, pushes them to IBM Cloud Container Registry, and deploys them to the Kubernetes cluster.

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Environment variables for IBM Cloud and Kubernetes
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}  
  REGION: ${{ secrets.IBM_CLOUD_REGION }}
  RESOURCE_GROUP: ${{ secrets.IBM_CLOUD_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.K8S_CLUSTER_NAME }}
  NAMESPACE: ${{ secrets.IBM_CLOUD_NAMESPACE }}
  REGISTRY: us.icr.io
  REPO_FRONTEND: ${{ secrets.IBM_CLOUD_NAMESPACE }}/frontend
  REPO_BACKEND: ${{ secrets.IBM_CLOUD_NAMESPACE }}/backend
  REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL }}
  FRONTEND_IMAGE_NAME: quantum1-frontend
  BACKEND_IMAGE_NAME: quantum1-backend
  FRONTEND_DEPLOYMENT_FILE: quantum1-frontend-deployment.yaml
  BACKEND_DEPLOYMENT_FILE: quantum1-backend-deployment.yaml
  FRONTEND_SERVICE_FILE: quantum1-frontend-service.yaml
  BACKEND_SERVICE_FILE: quantum1-backend-service.yaml
  IMAGE_TAG: ${{ github.sha }}


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Print Environment Variables
        run: |
          echo "REGION: $REGION"
          echo "RESOURCE_GROUP: $RESOURCE_GROUP"
          echo "CLUSTER_NAME: $CLUSTER_NAME"
          echo "NAMESPACE: $NAMESPACE"
          echo "REGISTRY: $REGISTRY"
          echo "REPO_FRONTEND: $REPO_FRONTEND"
          echo "REPO_BACKEND: $REPO_BACKEND"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print after checkout
        run: echo "Checked out repository to $PWD"

      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh

      - name: Create .env file
        run: |
          echo "REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}" > frontend/.env
          echo "Created .env file with backend URL"
          ibmcloud plugin install container-registry container-service -f

      - name: Print after IBM Cloud CLI install
        run: ibmcloud --version

      - name: Authenticate with IBM Cloud
        env:
          IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        run: |
          echo "Logging in to IBM Cloud with REGION=$REGION and RESOURCE_GROUP=$RESOURCE_GROUP"
          ibmcloud login --apikey $IBM_CLOUD_API_KEY -r $REGION -g $RESOURCE_GROUP
          ibmcloud cr login
          ibmcloud ks cluster config --cluster $CLUSTER_NAME
      - name: Create IBM CR image pull secret in cluster
        run: |
          kubectl create secret docker-registry icr-secret \
            --docker-server=us.icr.io \
            --docker-username=iamapikey \
            --docker-password="$IBM_CLOUD_API_KEY" \
            --docker-email=ranjantxusa@gmail.com \
            -n $NAMESPACE || echo "Secret already exists"

      - name: Patch default serviceaccount with imagePullSecret
        run: |
          kubectl patch serviceaccount default -n $NAMESPACE \
            -p '{"imagePullSecrets":[{"name":"icr-secret"}]}'

      - name: Print after IBM Cloud authentication
        run: |
          echo "Logged in to IBM Cloud"
          ibmcloud target -r $REGION -g $RESOURCE_GROUP
          ibmcloud ks cluster config --cluster $CLUSTER_NAME

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Print after Docker Buildx setup
        run: docker buildx version

      - name: Build and Push Frontend Image
        working-directory: ./frontend
        run: |
          echo "Building frontend image: $REGISTRY/$REPO_FRONTEND:$IMAGE_TAG"
          docker build -t $REGISTRY/$REPO_FRONTEND:$IMAGE_TAG .
          echo "Pushing frontend image: $REGISTRY/$REPO_FRONTEND:$IMAGE_TAG"
          docker push $REGISTRY/$REPO_FRONTEND:$IMAGE_TAG
        continue-on-error: false

      - name: Patch Frontend Deployment YAML with new image tag
        run: |
          sed -i "s|image: $REGISTRY/$REPO_FRONTEND:.*|image: $REGISTRY/$REPO_FRONTEND:$IMAGE_TAG|g" frontend/${FRONTEND_DEPLOYMENT_FILE}

      - name: Build and Push Backend Image
        working-directory: .
        run: |
          echo "Building backend image: $REGISTRY/$REPO_BACKEND:$IMAGE_TAG"
          docker build -t $REGISTRY/$REPO_BACKEND:$IMAGE_TAG -f Dockerfile .
          echo "Pushing backend image: $REGISTRY/$REPO_BACKEND:$IMAGE_TAG"
          docker push $REGISTRY/$REPO_BACKEND:$IMAGE_TAG
          echo "Backend image pushed: $REGISTRY/$REPO_BACKEND:$IMAGE_TAG"
        continue-on-error: false

      - name: Patch Backend Deployment YAML with new image tag
        run: |
          sed -i "s|image: $REGISTRY/$REPO_BACKEND:.*|image: $REGISTRY/$REPO_BACKEND:$IMAGE_TAG|g" ${BACKEND_DEPLOYMENT_FILE}

          
      - name: Apply Frontend Deployment
        run: |
          echo "Applying frontend deployment to namespace $NAMESPACE"
          kubectl apply -f frontend/quantum1-frontend-deployment.yaml -n $NAMESPACE
          kubectl rollout restart deployment quantum1-frontend -n $NAMESPACE
      - name: Wait for Frontend Deployment to be Ready
        run: |
          kubectl rollout status deployment/quantum1-frontend -n $NAMESPACE

      - name: Print after frontend deployment
        run: |
          echo "Frontend deployment applied"
          kubectl get deployment quantum1-frontend -n $NAMESPACE

      - name: Apply Backend Deployment
        run: |
          echo "Applying backend deployment to namespace $NAMESPACE"
          kubectl apply -f quantum1-backend-deployment.yaml -n $NAMESPACE
          kubectl rollout restart deployment quantum1-backend -n $NAMESPACE
      - name: Wait for Backend Deployment to be Ready
        run: |
          kubectl rollout status deployment/quantum1-backend -n $NAMESPACE

      - name: Print after backend deployment
        run: |
          echo "Backend deployment applied"
          kubectl get deployment quantum1-backend -n $NAMESPACE

      - name: Debug Service Endpoints
        run: |
          echo "Getting service endpoints in namespace $NAMESPACE"
          kubectl get svc -n $NAMESPACE

      - name: Print Backend Logs (on failure)
        if: ${{ failure() }}
        run: |
          echo "Printing backend logs on failure"
          kubectl logs -l app=quantum1-backend -n $NAMESPACE || true

      - name: Print Frontend Logs (on failure)
        if: ${{ failure() }}
        run: |
          echo "Printing frontend logs on failure"
          kubectl logs -l app=quantum1-frontend -n $NAMESPACE || true

      - name: Print Error Logs (on failure)
        if: ${{ failure() }}
        run: |
          echo "Printing all pods:"
          kubectl get pods -n $NAMESPACE || true
          echo "Describing all pods:"
          kubectl describe pods -n $NAMESPACE || true
          echo "Backend logs:"
          kubectl logs -l app=quantum1-backend -n $NAMESPACE --tail=100 || true
          echo "Frontend logs:"
          kubectl logs -l app=quantum1-frontend -n $NAMESPACE --tail=100 || true