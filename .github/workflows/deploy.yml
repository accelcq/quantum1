name: Deploy Quantum1 Frontend and Backend to IBM Cloud
# This GitHub Actions workflow deploys the Quantum1 frontend and backend applications to IBM Cloud Kubernetes Service.
# It builds Docker images for both applications, pushes them to IBM Cloud Container Registry, and deploys them to the Kubernetes cluster.

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
      NAMESPACE: ${{ secrets.IBM_CLOUD_NAMESPACE }}
      REGION: ${{ secrets.IBM_CLOUD_REGION }}
      RESOURCE_GROUP: ${{ secrets.IBM_CLOUD_RESOURCE_GROUP }}
      CLUSTER_NAME: ${{ secrets.K8S_CLUSTER_NAME }}
      IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
      IBMQ_API_TOKEN: ${{ secrets.IBMQ_API_TOKEN }}
      FMP_API_KEY: ${{ secrets.FMP_API_KEY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh

    - name: IBM Cloud CLI Login
      run: |
        ibmcloud login --apikey "$IBM_CLOUD_API_KEY" -r "$REGION"
        ibmcloud target -g "$RESOURCE_GROUP"
        ibmcloud plugin install container-registry -f
        ibmcloud cr login
        echo "IBM Cloud CLI login successful."
        
    - name: Install IBM Cloud CLI plugins
      run: |
        ibmcloud plugin install container-service -f
        ibmcloud plugin install kubernetes-service -f

    - name: Debug IBM Cloud account and clusters
      run: |
        echo "Current account and resource group info:"
        ibmcloud target
        echo "Available resource groups:"
        ibmcloud resource groups
        echo "Available plugins:"
        ibmcloud plugin list
        echo "Available clusters:"
        ibmcloud ks cluster ls || echo "ks plugin not available"

    - name: Set up Kubernetes CLI
      run: |
        ibmcloud ks cluster config --cluster "$CLUSTER_NAME"
        echo "KUBECONFIG environment variable set to: $KUBECONFIG"

    - name: Configure access to IBM Kubernetes Service
      run: |
        ibmcloud ks cluster config --cluster "$CLUSTER_NAME"

    - name: Install tools
      run: sudo apt-get update && sudo apt-get install -y gettext curl

    - name: Print Environment Variables
      run: |
        echo "üîé Verifying environment variables..."
        echo "REGION: ${REGION:-MISSING}"
        echo "RESOURCE_GROUP: ${RESOURCE_GROUP:-MISSING}"
        echo "CLUSTER_NAME: ${CLUSTER_NAME:-MISSING}"
        echo "NAMESPACE: ${NAMESPACE:-MISSING}"
        echo "IMAGE_TAG: ${IMAGE_TAG:-MISSING}"

    - name: Debug Environment Variables (for deployment)
      run: |
        echo "üîé Verifying API keys and secrets..."
        echo "FMP_API_KEY: ${FMP_API_KEY:0:10}..."
        echo "IBM_CLOUD_API_KEY: ${IBM_CLOUD_API_KEY:0:10}..."
        echo "IBMQ_API_TOKEN: ${IBMQ_API_TOKEN:0:10}..."
        echo "All environment variables verified for backend deployment."

    - name: Clean up old images in IBM CR (avoid quota exceeded)
      run: |
        bash deleteibmcloudcrimages.sh

    - name: Wait for IBM CR to free up quota
      run: |
        echo "Waiting 30 seconds for IBM CR to process deletions..."
        sleep 30

    - name: Render backend deployment file
      run: |
        echo "[$(date -u)] üìù Rendering backend deployment files..."
        export IMAGE_TAG=$IMAGE_TAG
        export NAMESPACE=$NAMESPACE
        export REGION=$REGION
        export IBM_CLOUD_API_KEY="$IBM_CLOUD_API_KEY"
        export IBMQ_API_TOKEN="$IBMQ_API_TOKEN"
        export FMP_API_KEY="$FMP_API_KEY"
        envsubst < quantum1-backend-deployment.yaml > rendered_backend.yaml
        envsubst < quantum1-backend-service.yaml > rendered_backend_service.yaml
        echo "üìã Rendered backend deployment preview:"
        head -30 rendered_backend.yaml

    - name: Build and push backend Docker image
      run: |
        echo "[$(date -u)] üöÄ Building backend Docker image..."
        docker build -t us.icr.io/$NAMESPACE/quantum1-backend:$IMAGE_TAG ./app
        echo "[$(date -u)] üì§ Pushing backend Docker image..."
        docker push us.icr.io/$NAMESPACE/quantum1-backend:$IMAGE_TAG
        echo "[$(date -u)] ‚è≥ Waiting for backend image to appear in ICR..."
        for i in {1..30}; do
          ibmcloud cr image-list | grep "quantum1-backend.*$IMAGE_TAG" && break
          echo "[$(date -u)] Waiting for backend image in ICR... ($i/30)"; sleep 10
        done
        ibmcloud cr image-list | grep "quantum1-backend.*$IMAGE_TAG" || (echo "[$(date -u)] ‚ùå Backend image not found in ICR after 5 minutes" && exit 1)

    - name: Deploy backend to IBM Kubernetes
      run: |
        echo "[$(date -u)] üöÄ Deploying backend..."
        kubectl apply -f rendered_backend.yaml -n $NAMESPACE
        kubectl apply -f rendered_backend_service.yaml -n $NAMESPACE

    - name: Wait for backend service external IP
      id: wait-backend-ip
      run: |
        echo "‚è≥ Waiting for backend service external IP..."
        for i in {1..30}; do
          BACKEND_IP=$(kubectl get svc quantum1-backend-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -n "$BACKEND_IP" ]; then
            echo "‚úÖ Backend IP: $BACKEND_IP"
            echo "BACKEND_IP=$BACKEND_IP" >> $GITHUB_ENV
            break
          fi
          sleep 10
        done
        if [ -z "$BACKEND_IP" ]; then
          echo "‚ùå Backend external IP not found."
          exit 1
        fi

    - name: Write backend URL to frontend/.env.production
      run: |
        echo "REACT_APP_BACKEND_URL=http://$BACKEND_IP:8080" > frontend/.env.production
        cat frontend/.env.production

    - name: Build and push frontend Docker image
      run: |
        cd frontend
        docker build -t us.icr.io/$NAMESPACE/quantum1-frontend:$IMAGE_TAG .
        docker push us.icr.io/$NAMESPACE/quantum1-frontend:$IMAGE_TAG

    - name: Render frontend deployment files
      run: |
        echo "[$(date -u)] üìù Rendering frontend deployment files..."
        export IMAGE_TAG=$IMAGE_TAG
        export NAMESPACE=$NAMESPACE
        envsubst < frontend/quantum1-frontend-deployment.yaml > rendered_frontend.yaml
        envsubst < frontend/quantum1-frontend-service.yaml > rendered_frontend_service.yaml
        echo "üìã Rendered frontend deployment preview:"
        head -20 rendered_frontend.yaml

    - name: Deploy frontend
      run: |
        echo "[$(date -u)] ÔøΩ Deploying frontend..."
        kubectl apply -f rendered_frontend.yaml -n $NAMESPACE
        kubectl apply -f rendered_frontend_service.yaml -n $NAMESPACE

    - name: Check rollout status and fallback on failure
      run: |
        set -e
        echo "üîç Checking rollout status for frontend..."
        kubectl rollout status deployment/quantum1-frontend -n $NAMESPACE || kubectl rollout.undo deployment/quantum1-frontend -n $NAMESPACE
        echo "üîç Checking rollout status for backend..."
        kubectl rollout status deployment/quantum1-backend -n $NAMESPACE || kubectl rollout.undo deployment/quantum1-backend -n $NAMESPACE

    - name: Health Check for Services
      run: |
        FRONTEND_IP=$(kubectl get svc quantum1-frontend-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        BACKEND_IP=$(kubectl get svc quantum1-backend-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        echo "üåê Frontend: http://$FRONTEND_IP"
        echo "üåê Backend: http://$BACKEND_IP:8080/docs"

        echo "üîé Health checking backend..."
        curl -sSf http://$BACKEND_IP:8080/health || echo "‚ùå Backend health check failed"

        echo "üîé Health checking frontend..."
        curl -sSf http://$FRONTEND_IP || echo "‚ùå Frontend health check failed"

    - name: Deployment Summary
      run: |
        echo "‚úÖ Quantum1 Deployment Complete."
        echo "üöÄ Frontend accessible at: http://$FRONTEND_IP"
        echo "üîó Backend API Docs: http://$BACKEND_IP:8080/docs"

    - name: Debug Service Endpoints
      run: |
        echo "Getting service endpoints in namespace $NAMESPACE"
        kubectl get svc -n $NAMESPACE

    - name: Print Backend Logs (on failure)
      if: ${{ failure() }}
      run: |
        echo "Printing backend logs on failure"
        kubectl logs -l app=quantum1-backend -n $NAMESPACE || true

    - name: Print Frontend Logs (on failure)
      if: ${{ failure() }}
      run: |
        echo "Printing frontend logs on failure"
        kubectl logs -l app=quantum1-frontend -n $NAMESPACE || true

    - name: Print Error Logs (on failure)
      if: ${{ failure() }}
      run: |
        echo "Printing all pods:"
        kubectl get pods -n $NAMESPACE || true
        echo "Describing all pods:"
        kubectl describe pods -n $NAMESPACE || true
        kubectl get svc quantum1-backend-service -n quantum1space || true
        echo "Describing backend service:"
        kubectl describe svc quantum1-backend-service -n quantum1space || true
        kubectl describe pod -l app=quantum1-backend -n $NAMESPACE || true
        echo "Backend logs:"
        kubectl logs -l app=quantum1-backend -n $NAMESPACE --tail=100 || true
        echo "Frontend logs:"
        kubectl logs -l app=quantum1-frontend -n $NAMESPACE --tail=100 || true

    - name: Stop K8s Services and Clean Up Images (on failure)
      if: ${{ failure() }}
      run: |
        chmod +x stop_k8s_services.sh run_stop_k8s_services_ci.sh
        ./run_stop_k8s_services_ci.sh
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        IBM_CLOUD_NAMESPACE: ${{ secrets.IBM_CLOUD_NAMESPACE }}
        IBM_CLOUD_REGION: ${{ secrets.IBM_CLOUD_REGION }}
      shell: bash
