name: Deploy Quantum1 Frontend and Backend to IBM Cloud
# This GitHub Actions workflow deploys the Quantum1 frontend and backend applications to IBM Cloud Kubernetes Service.
# It builds Docker images for both applications, pushes them to IBM Cloud Container Registry, and deploys them to the Kubernetes cluster.

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install IBM Cloud CLI and Login
      uses: ibm-actions/ibmcloud-login@v1
      with:
        apiKey: ${{ secrets.IBM_CLOUD_API_KEY }}
        region: ${{ secrets.REGION }}
        resourceGroup: ${{ secrets.RESOURCE_GROUP }}
        exportCredential: true

    - name: Configure access to IBM Kubernetes Service
      run: |
        ibmcloud ks cluster config --cluster ${{ secrets.CLUSTER_NAME }}

    - name: Install tools
      run: sudo apt-get update && sudo apt-get install -y gettext curl

    - name: Print Environment Variables
      run: |
        echo "üîé Verifying environment variables..."
        echo "REGION: ${REGION:-MISSING}"
        echo "RESOURCE_GROUP: ${RESOURCE_GROUP:-MISSING}"
        echo "CLUSTER_NAME: ${CLUSTER_NAME:-MISSING}"
        echo "NAMESPACE: ${NAMESPACE:-MISSING}"
        echo "IMAGE_TAG: ${IMAGE_TAG:-MISSING}"

    - name: Render deployment files
      run: |
        export IMAGE_TAG=${{ github.sha }}
        export TIMESTAMP=$(date +%s)
        envsubst < quantum1-backend-deployment.yaml > rendered_backend.yaml
        envsubst < quantum1-backend-service.yaml > rendered_backend_service.yaml

    - name: Apply backend manifests
      run: |
        kubectl apply -f rendered_backend.yaml -n ${{ secrets.NAMESPACE }}
        kubectl apply -f rendered_backend_service.yaml -n ${{ secrets.NAMESPACE }}

    - name: Wait for backend IP and set frontend env
      run: |
        echo "‚è≥ Waiting for backend service external IP..."
        for i in {1..30}; do
          BACKEND_IP=$(kubectl get svc quantum1-backend-service -n ${{ secrets.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          if [ ! -z "$BACKEND_IP" ]; then
            echo "‚úÖ Backend IP: $BACKEND_IP"
            break
          fi
          echo "Waiting... ($i)"; sleep 5
        done
        if [ -z "$BACKEND_IP" ]; then
          echo "‚ùå Failed to get backend service IP"; exit 1
        fi
        echo "REACT_APP_BACKEND_URL=http://$BACKEND_IP:8080" > frontend/.env.production
        cat frontend/.env.production

    - name: Build and push frontend Docker image
      run: |
        cd frontend
        npm install
        npm run build
        docker build -t us.icr.io/quantum1space/quantum1-frontend:${{ github.sha }} .
        docker push us.icr.io/quantum1space/quantum1-frontend:${{ github.sha }}

    - name: Render and deploy frontend
      run: |
        export IMAGE_TAG=${{ github.sha }}
        envsubst < quantum1-frontend-deployment.yaml > rendered_frontend.yaml
        envsubst < quantum1-frontend-service.yaml > rendered_frontend_service.yaml
        kubectl apply -f rendered_frontend.yaml -n ${{ secrets.NAMESPACE }}
        kubectl apply -f rendered_frontend_service.yaml -n ${{ secrets.NAMESPACE }}

    - name: Restart deployments
      run: |
        kubectl rollout restart deployment/quantum1-frontend -n ${{ secrets.NAMESPACE }}
        kubectl rollout restart deployment/quantum1-backend -n ${{ secrets.NAMESPACE }}

    - name: Check rollout status and fallback on failure
      run: |
        set -e
        echo "üîç Checking rollout status for frontend..."
        kubectl rollout status deployment/quantum1-frontend -n ${{ secrets.NAMESPACE }} || kubectl rollout undo deployment/quantum1-frontend -n ${{ secrets.NAMESPACE }}
        echo "üîç Checking rollout status for backend..."
        kubectl rollout status deployment/quantum1-backend -n ${{ secrets.NAMESPACE }} || kubectl rollout undo deployment/quantum1-backend -n ${{ secrets.NAMESPACE }}

    - name: Health Check for Services
      run: |
        FRONTEND_IP=$(kubectl get svc quantum1-frontend-service -n ${{ secrets.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        BACKEND_IP=$(kubectl get svc quantum1-backend-service -n ${{ secrets.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        echo "üåê Frontend: http://$FRONTEND_IP"
        echo "üåê Backend: http://$BACKEND_IP:8080/docs"

        echo "üîé Health checking backend..."
        curl -sSf http://$BACKEND_IP:8080/health || echo "‚ùå Backend health check failed"

        echo "üîé Health checking frontend..."
        curl -sSf http://$FRONTEND_IP || echo "‚ùå Frontend health check failed"

    - name: Deployment Summary
      run: |
        echo "‚úÖ Quantum1 Deployment Complete."
        echo "üöÄ Frontend accessible at: http://$FRONTEND_IP"
        echo "üîó Backend API Docs: http://$BACKEND_IP:8080/docs"

    - name: Debug Service Endpoints
      run: |
        echo "Getting service endpoints in namespace ${{ secrets.NAMESPACE }}"
        kubectl get svc -n ${{ secrets.NAMESPACE }}

    - name: Print Backend Logs (on failure)
      if: ${{ failure() }}
      run: |
        echo "Printing backend logs on failure"
        kubectl logs -l app=quantum1-backend -n ${{ secrets.NAMESPACE }} || true

    - name: Print Frontend Logs (on failure)
      if: ${{ failure() }}
      run: |
        echo "Printing frontend logs on failure"
        kubectl logs -l app=quantum1-frontend -n ${{ secrets.NAMESPACE }} || true

    - name: Print Error Logs (on failure)
      if: ${{ failure() }}
      run: |
        echo "Printing all pods:"
        kubectl get pods -n ${{ secrets.NAMESPACE }} || true
        echo "Describing all pods:"
        kubectl describe pods -n ${{ secrets.NAMESPACE }} || true
        echo "Backend logs:"
        kubectl logs -l app=quantum1-backend -n ${{ secrets.NAMESPACE }} --tail=100 || true
        echo "Frontend logs:"
        kubectl logs -l app=quantum1-frontend -n ${{ secrets.NAMESPACE }} --tail=100 || true
